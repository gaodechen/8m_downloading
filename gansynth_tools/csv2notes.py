""" Convert csv generated by pitch estimation tools into notes sequences
"""

import sys
import csv
import numpy as np
from math import log2


def freq_to_midi_note(freq):
    concert_pitch = 440
    return round(69 + 12 * log2(freq / concert_pitch))


def read_notes(filename):
    pitches = []
    start_times = []
    end_times = []
    notes = {}

    print("Analyzing " + filename)

    with open(filename, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        for line in csv_reader:
            if(line[1] == 'frequency'):
                continue
            if(float(line[2]) < 0.80):
                continue
            pitch = freq_to_midi_note(float(line[1]))
            start_time = float(line[0])
            end_time = start_time + 0.01

            pitches.append(pitch)
            start_times.append(start_time)
            end_times.append(end_time)
    notes['pitches'] = pitches
    notes['start_times'] = start_times
    notes['end_times'] = end_times
    return notes


def trim(_notes, min_pitch=36, max_pitch=84):
    _pitches = _notes['pitches']
    _start_times = _notes['start_times']
    _end_times = _notes['end_times']

    pitches = []
    start_times = []
    end_times = []
    notes = {}

    start_point = 0
    end_point = 1
    while(end_point < len(_pitches)):
        if(_pitches[end_point] == _pitches[end_point - 1]):
            end_point = end_point + 1
        else:
            pitch = _pitches[end_point - 1]
            if(pitch >= min_pitch and pitch <= max_pitch):
                pitches.append(pitch)
                start_times.append(_start_times[start_point])
                end_times.append(_end_times[end_point - 1])
            start_point = end_point
            end_point = end_point + 1

    notes['pitches'] = np.array(pitches)
    notes['start_times'] = np.array(start_times)
    notes['end_times'] = np.array(end_times)
    notes['velocities'] = []
    notes['velocities'] = np.array(np.pad(notes['velocities'], len(notes['pitches']), 'constant', constant_values = 60))

    return notes


def read_trim_notes(filename):
    return trim(read_notes(filename))
